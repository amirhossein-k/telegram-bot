// app/api/telegram/route.js
import { Telegraf } from "telegraf";
import MongoSession from "telegraf-session-mongodb";
import { MongoClient } from "mongodb";

const bot = new Telegraf(process.env.BOT_TOKEN);

// ÿ™ŸÜÿ∏€åŸÖ MongoDB ÿ®ÿ±ÿß€å session
const client = new MongoClient(process.env.MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

async function setupMongoSession() {
  try {
    await client.connect();
    const db = client.db();
    const session = new MongoSession(db, { collectionName: "sessions" });
    bot.use(session.middleware());
    console.log("‚úÖ MongoDB connected for sessions");
  } catch (err) {
    console.error("‚ùå Error connecting to MongoDB:", err);
  }
}

setupMongoSession();

// ÿØÿ≥ÿ™Ÿàÿ± /start
bot.start((ctx) => {
  console.log("üì© Command /start received from:", ctx.from);
  ctx.session.waitingForPhoto = false; // ÿ±€åÿ≥ÿ™ session
  ctx.reply("ÿÆŸàÿ¥ ÿ¢ŸÖÿØ€åÿØ! ÿ®ÿ±ÿß€å ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥ÿå ÿØ⁄©ŸÖŸá ÿ≤€åÿ± ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ:", {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì§ ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥", callback_data: "upload_photo" }],
      ],
    },
  });
});

// ÿØÿ≥ÿ™Ÿàÿ± /buttons
bot.command("buttons", (ctx) => {
  console.log("üì© Command /buttons received from:", ctx.from);
  const markup = {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üì§ ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥", callback_data: "upload_photo" }],
      ],
    },
  };
  console.log("Markup:", JSON.stringify(markup, null, 2));
  ctx.reply("€å⁄© ⁄Øÿ≤€åŸÜŸá ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", markup);
});

// ŸàŸÇÿ™€å ⁄©ÿßÿ±ÿ®ÿ± ÿØ⁄©ŸÖŸá ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥ ÿ±Ÿà ÿ≤ÿØ
bot.on("callback_query", async (ctx) => {
  const data = ctx.callbackQuery?.data;

  if (!data) {
    console.log("‚ùå callback_query ÿ®ÿØŸàŸÜ data ÿØÿ±€åÿßŸÅÿ™ ÿ¥ÿØ");
    return ctx.answerCbQuery();
  }

  console.log("Callback received:", data);

  if (data === "upload_photo") {
    ctx.session.waitingForPhoto = true;
    ctx.reply("üì∏ ŸÑÿ∑ŸÅÿßŸã €å⁄© ÿπ⁄©ÿ≥ ÿßÿ±ÿ≥ÿßŸÑ ⁄©ŸÜ");
  }

  ctx.answerCbQuery();
});
// ŸàŸÇÿ™€å ÿπ⁄©ÿ≥ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ
bot.on("photo", async (ctx) => {
  if (!ctx.session.waitingForPhoto) {
    return ctx.reply("ŸÑÿ∑ŸÅÿßŸã ÿßŸàŸÑ ÿØ⁄©ŸÖŸá ÿ¢ŸæŸÑŸàÿØ ÿ±ÿß ÿ®ÿ≤ŸÜ€åÿØ!");
  }

  const photo = ctx.message.photo.pop();
  const fileId = photo.file_id;

  try {
    const file = await ctx.telegram.getFile(fileId);
    const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
    console.log("File URL:", fileUrl);

    ctx.reply("‚è≥ ÿØÿ± ÿ≠ÿßŸÑ ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥...");

    const res = await fetch(`${process.env.UPLOAD_ENDPOINT}/api/upload`, {
      method: "POST",
      body: JSON.stringify({ url: fileUrl }),
      headers: { "Content-Type": "application/json" },
    }).catch(() => null);

    if (!res) {
      return ctx.reply("‚ùå ÿ≥ÿ±Ÿàÿ± ÿ¢ŸæŸÑŸàÿØ ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ŸÜ€åÿ≥ÿ™");
    }

    const data = await res.json();
    if (data.success) {
      ctx.session.waitingForPhoto = false;
      await ctx.replyWithPhoto(data.url, {
        caption: "‚úÖ ÿ¢ŸæŸÑŸàÿØ ŸÖŸàŸÅŸÇ ÿ¥ÿØ!",
        reply_markup: {
          inline_keyboard: [
            [{ text: "üóë ÿ≠ÿ∞ŸÅ ÿπ⁄©ÿ≥", callback_data: `delete_${data.key}` }],
          ],
        },
      });
    } else {
      ctx.reply("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ¢ŸæŸÑŸàÿØ ÿ®Ÿá ÿ≥ÿ±Ÿàÿ±");
    }
  } catch (err) {
    console.error("‚ùå Error uploading:", err);
    ctx.reply("‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿ¢ŸæŸÑŸàÿØ ÿπ⁄©ÿ≥");
  }
});

// ÿØÿ≥ÿ™Ÿàÿ± ÿ™ÿ≥ÿ™
bot.command("ping", (ctx) => ctx.reply("pong üèì"));

export async function POST(req) {
  try {
    const body = await req.json();
    await bot.handleUpdate(body);
    return new Response("ok");
  } catch (err) {
    console.error("‚ùå Error:", err);
    return new Response("error", { status: 500 });
  }
}

export async function GET() {
  try {
    await bot.telegram.setWebhook(
      `${process.env.NEXT_PUBLIC_URL}/api/telegram`
    );
    return new Response("‚úÖ Webhook set successfully");
  } catch (err) {
    console.error("‚ùå Error setting webhook:", err);
    return new Response("‚ùå Error setting webhook", { status: 500 });
  }
}
